import{_ as s,c as e,o as a,a6 as t}from"./chunks/framework.JNW9MrJN.js";const i="/ItemResponsePlots.jl/previews/PR29/assets/getting-started-1.BepesC-Z.png",n="/ItemResponsePlots.jl/previews/PR29/assets/getting-started-2.dUi299Yp.png",E=JSON.parse('{"title":"Getting started","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started.md","filePath":"getting-started.md","lastUpdated":null}'),l={name:"getting-started.md"},o=t(`<h1 id="Getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#Getting-started" aria-label="Permalink to &quot;Getting started {#Getting-started}&quot;">​</a></h1><p>After successful <a href="/ItemResponsePlots.jl/previews/PR29/index#Installation">installation</a> you can start plotting your item response models. Typically visualizations of item response models are made from models fitted to data. In this simple example we will fit a Rasch Model to simulated data and plot the results.</p><h2 id="Fitting-the-model" tabindex="-1">Fitting the model <a class="header-anchor" href="#Fitting-the-model" aria-label="Permalink to &quot;Fitting the model {#Fitting-the-model}&quot;">​</a></h2><p>Using the <a href="https://github.com/juliapsychometrics/RaschModels.jl" target="_blank" rel="noreferrer">RaschModels.jl</a> package we can fit a simple Rasch Model to dichotomous responses from 100 persons to 5 items.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RaschModels</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n_persons </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n_items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_persons, n_items)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RaschModel, data, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RaschModels.RaschModel{AbstractItemResponseModels.PointEstimate, Matrix{Int64}, RaschModels.CombinedCMLResult{NamedArrays.NamedVector{Float64, Vector{Float64}, Tuple{OrderedCollections.OrderedDict{Symbol, Int64}}}}}([0 1 … 0 1; 0 1 … 0 1; … ; 0 0 … 1 1; 0 1 … 0 0], RaschModels.CombinedCMLResult{NamedArrays.NamedVector{Float64, Vector{Float64}, Tuple{OrderedCollections.OrderedDict{Symbol, Int64}}}}(RaschModels.RaschModel, [0.09893559619242845, -0.05318097045455164, -0.0913712791915941, 0.13698793264531345, -0.09137127919159618, 0.3374996829310541, 0.3374996829310541, 0.3374996829310541, -0.33758334690201447, 0.3374996829310541  …  0.3374996829310541, -0.33758334690201447, -0.33758334690201447, -1.1018215057279888, 0.3374996829310541, 0.3374996829310541, 2.4033017344068153, 0.3374996829310541, -0.33758334690201447, -0.33758334690201447], RaschModels.CMLResult{NamedArrays.NamedVector{Float64, Vector{Float64}, Tuple{OrderedCollections.OrderedDict{Symbol, Int64}}}, Optim.MultivariateOptimizationResults{Optim.BFGS{LineSearches.InitialStatic{Float64}, LineSearches.HagerZhang{Float64, Base.RefValue{Bool}}, Nothing, Nothing, Optim.Flat}, Vector{Float64}, Float64, Float64, Vector{Optim.OptimizationState{Float64, Optim.BFGS{LineSearches.InitialStatic{Float64}, LineSearches.HagerZhang{Float64, Base.RefValue{Bool}}, Nothing, Nothing, Optim.Flat}}}, Bool, @NamedTuple{f_limit_reached::Bool, g_limit_reached::Bool, h_limit_reached::Bool, time_limit::Bool, callback::Bool, f_increased::Bool}}}(RaschModels.RaschModel, [0.09893559619242845, -0.05318097045455164, -0.0913712791915941, 0.13698793264531345, -0.09137127919159618],  * Status: success</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Candidate solution</span></span>
<span class="line"><span>    Final objective value:     2.028650e+02</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Found with</span></span>
<span class="line"><span>    Algorithm:     BFGS</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Convergence measures</span></span>
<span class="line"><span>    |x - x&#39;|               = 1.16e-05 ≰ 0.0e+00</span></span>
<span class="line"><span>    |x - x&#39;|/|x&#39;|          = 6.10e-05 ≰ 0.0e+00</span></span>
<span class="line"><span>    |f(x) - f(x&#39;)|         = 4.19e-09 ≰ 0.0e+00</span></span>
<span class="line"><span>    |f(x) - f(x&#39;)|/|f(x&#39;)| = 2.07e-11 ≰ 0.0e+00</span></span>
<span class="line"><span>    |g(x)|                 = 2.99e-09 ≤ 1.0e-08</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Work counters</span></span>
<span class="line"><span>    Seconds run:   0  (vs limit Inf)</span></span>
<span class="line"><span>    Iterations:    4</span></span>
<span class="line"><span>    f(x) calls:    9</span></span>
<span class="line"><span>    ∇f(x) calls:   9</span></span>
<span class="line"><span>, -202.86497029209238, 4, RaschModels.ESF{Float64}([1.0, 5.5461999908996304, 12.275832701156576, 13.553305032424898, 7.463642374608085, 1.6399700524401326], [1.0 1.1642959465969065 … 0.9626625572291894 1.2096207435367687; 4.5461999908996304 5.101833117158253 … 4.412399867052903 5.245616213601187; … ; 1.6399700524401326 1.6399700524401328 … 1.6399700524401326 1.6399700524401326; 0.0 0.0 … 0.0 0.0], [1.0 0.0 … 0.0 0.0; 4.5461999908996304 1.1642959465969065 … 0.9626625572291894 1.2096207435367687; … ; 1.6399700524401326 1.6399700524401328 … 1.6399700524401326 1.6399700524401326; 0.0 0.0 … 0.0 0.0;;; 0.0 1.1642959465969065 … 0.0 0.0; 1.1642959465969065 5.101833117158253 … 1.1208241133225576 1.408356528619396; … ; 1.6399700524401328 1.6399700524401328 … 1.6399700524401326 1.6399700524401326; 0.0 0.0 … 0.0 0.0;;; 0.0 0.0 … 0.0 0.0; 1.209620743536766 1.4083565286193929 … 1.1644565982505766 1.463182343194442; … ; 1.6399700524401328 1.6399700524401328 … 1.6399700524401326 1.6399700524401326; 0.0 0.0 … 0.0 0.0;;; 0.0 0.0 … 0.9626625572291894 0.0; 0.9626625572291894 1.1208241133225576 … 4.412399867052903 1.1644565982505792; … ; 1.6399700524401326 1.6399700524401326 … 1.6399700524401326 1.6399700524401328; 0.0 0.0 … 0.0 0.0;;; 0.0 0.0 … 0.0 1.2096207435367687; 1.2096207435367687 1.408356528619396 … 1.1644565982505792 5.245616213601187; … ; 1.6399700524401326 1.6399700524401326 … 1.6399700524401328 1.6399700524401326; 0.0 0.0 … 0.0 0.0], 5, 6), [0.03044595249887679 -0.007602302188625113 … -0.007589347545418463 -0.007627151382416597; -0.007602302188625113 0.030510648336367217 … -0.007615624856679147 -0.007646360645531485; … ; -0.007589347545418464 -0.007615624856679149 … 0.030486495305436217 -0.007640761451669305; -0.007627151382416598 -0.007646360645531486 … -0.007640761451669306 0.030583817033443046], RaschModels.CML{RaschModels.SummationAlgorithm}(RaschModels.SummationAlgorithm(), nothing, true)), RaschModels.PersonParameterResult{RaschModels.PersonParameterWLE}(RaschModels.RaschModel, [-2.4031580457188277, -1.1018215057279888, -0.33758334690201447, 0.3374996829310541, 1.1018140207817957, 2.4033017344068153], [1.6195240780197766, 1.0339127853727894, 0.9081886977107281, 0.9082004114165386, 1.0339508985048969, 1.619613758546717], RaschModels.PersonParameterWLE())), [Symbol(&quot;beta[1]&quot;), Symbol(&quot;beta[2]&quot;), Symbol(&quot;beta[3]&quot;), Symbol(&quot;beta[4]&quot;), Symbol(&quot;beta[5]&quot;)])</span></span></code></pre></div><h2 id="Plotting-results" tabindex="-1">Plotting results <a class="header-anchor" href="#Plotting-results" aria-label="Permalink to &quot;Plotting results {#Plotting-results}&quot;">​</a></h2><p>Having fit the model we can now plot the results. In this example we create a plot for the whole test (5 items) by calling the <a href="/ItemResponsePlots.jl/previews/PR29/examples/plots/testplot#testplot"><code>testplot</code></a> function.</p><p><a href="/ItemResponsePlots.jl/previews/PR29/examples/plots/testplot#testplot"><code>testplot</code></a> only requires the fitted model (<code>model</code>) as the single function argument.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemResponsePlots</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testplot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model)</span></span></code></pre></div><p><img src="`+i+`" alt=""></p><p>The plot above contains the test characteristic curve on the left and the test information curve on the right.</p><p>If we are interested in only a subset of items, we can plot this subset by passing a set of indices to <a href="/ItemResponsePlots.jl/previews/PR29/examples/plots/testplot#testplot"><code>testplot</code></a> in the second argument.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testplot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, items)</span></span></code></pre></div><p><img src="`+n+'" alt=""></p><h2 id="How-to-continue-from-here?" tabindex="-1">How to continue from here? <a class="header-anchor" href="#How-to-continue-from-here?" aria-label="Permalink to &quot;How to continue from here? {#How-to-continue-from-here?}&quot;">​</a></h2><p>If you are interested in ways to expand on the example above, you can take a look at the function reference for <a href="/ItemResponsePlots.jl/previews/PR29/examples/plots/testplot#testplot"><code>testplot</code></a> and its building blocks <a href="/ItemResponsePlots.jl/previews/PR29/examples/recipes/expected_score_plot#expected_score_plot"><code>expected_score_plot</code></a> and <a href="/ItemResponsePlots.jl/previews/PR29/examples/recipes/information_plot#information_plot"><code>information_plot</code></a>.</p><p>If you want to see more examples of item response plots, consider the <a href="./getting-started">Examples</a> page of this documentation.</p>',18),p=[o];function h(r,d,c,k,m,g){return a(),e("div",null,p)}const y=s(l,[["render",h]]);export{E as __pageData,y as default};
