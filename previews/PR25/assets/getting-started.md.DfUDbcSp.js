import{_ as s,c as e,o as a,a6 as t}from"./chunks/framework.DBpRcs4U.js";const i="/ItemResponsePlots.jl/previews/PR25/assets/getting-started-1.B8VKBv6l.png",n="/ItemResponsePlots.jl/previews/PR25/assets/getting-started-2.B_i3yEUN.png",E=JSON.parse('{"title":"Getting started","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started.md","filePath":"getting-started.md","lastUpdated":null}'),l={name:"getting-started.md"},o=t(`<h1 id="Getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#Getting-started" aria-label="Permalink to &quot;Getting started {#Getting-started}&quot;">​</a></h1><p>After successful <a href="/ItemResponsePlots.jl/previews/PR25/index#Installation">installation</a> you can start plotting your item response models. Typically visualizations of item response models are made from models fitted to data. In this simple example we will fit a Rasch Model to simulated data and plot the results.</p><h2 id="Fitting-the-model" tabindex="-1">Fitting the model <a class="header-anchor" href="#Fitting-the-model" aria-label="Permalink to &quot;Fitting the model {#Fitting-the-model}&quot;">​</a></h2><p>Using the <a href="https://github.com/juliapsychometrics/RaschModels.jl" target="_blank" rel="noreferrer">RaschModels.jl</a> package we can fit a simple Rasch Model to dichotomous responses from 100 persons to 5 items.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RaschModels</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n_persons </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n_items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_persons, n_items)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RaschModel, data, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RaschModels.RaschModel{AbstractItemResponseModels.PointEstimate, Matrix{Int64}, RaschModels.CombinedCMLResult{NamedArrays.NamedVector{Float64, Vector{Float64}, Tuple{OrderedCollections.OrderedDict{Symbol, Int64}}}}}([0 0 … 1 1; 1 1 … 0 0; … ; 1 0 … 1 1; 1 0 … 1 1], RaschModels.CombinedCMLResult{NamedArrays.NamedVector{Float64, Vector{Float64}, Tuple{OrderedCollections.OrderedDict{Symbol, Int64}}}}(RaschModels.RaschModel, [0.09045929459760335, 0.05282539416962286, -0.13561726425586892, 0.16593286814563893, -0.1736002926569962, -0.33835739106124, 0.33845947026860906, 0.33845947026860906, -0.33835739106124, -1.104409667247147  …  2.4074547817918543, 0.33845947026860906, -1.104409667247147, -0.33835739106124, 1.1044183773646967, 0.33845947026860906, 0.33845947026860906, 1.1044183773646967, 1.1044183773646967, 1.1044183773646967], RaschModels.CMLResult{NamedArrays.NamedVector{Float64, Vector{Float64}, Tuple{OrderedCollections.OrderedDict{Symbol, Int64}}}, Optim.MultivariateOptimizationResults{Optim.BFGS{LineSearches.InitialStatic{Float64}, LineSearches.HagerZhang{Float64, Base.RefValue{Bool}}, Nothing, Nothing, Optim.Flat}, Vector{Float64}, Float64, Float64, Vector{Optim.OptimizationState{Float64, Optim.BFGS{LineSearches.InitialStatic{Float64}, LineSearches.HagerZhang{Float64, Base.RefValue{Bool}}, Nothing, Nothing, Optim.Flat}}}, Bool, @NamedTuple{f_limit_reached::Bool, g_limit_reached::Bool, h_limit_reached::Bool, time_limit::Bool, callback::Bool, f_increased::Bool}}}(RaschModels.RaschModel, [0.09045929459760335, 0.05282539416962286, -0.13561726425586892, 0.16593286814563893, -0.1736002926569962],  * Status: success</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Candidate solution</span></span>
<span class="line"><span>    Final objective value:     2.048699e+02</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Found with</span></span>
<span class="line"><span>    Algorithm:     BFGS</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Convergence measures</span></span>
<span class="line"><span>    |x - x&#39;|               = 2.77e-09 ≰ 0.0e+00</span></span>
<span class="line"><span>    |x - x&#39;|/|x&#39;|          = 1.05e-08 ≰ 0.0e+00</span></span>
<span class="line"><span>    |f(x) - f(x&#39;)|         = 0.00e+00 ≤ 0.0e+00</span></span>
<span class="line"><span>    |f(x) - f(x&#39;)|/|f(x&#39;)| = 0.00e+00 ≤ 0.0e+00</span></span>
<span class="line"><span>    |g(x)|                 = 1.19e-13 ≤ 1.0e-08</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Work counters</span></span>
<span class="line"><span>    Seconds run:   0  (vs limit Inf)</span></span>
<span class="line"><span>    Iterations:    6</span></span>
<span class="line"><span>    f(x) calls:    13</span></span>
<span class="line"><span>    ∇f(x) calls:   13</span></span>
<span class="line"><span>, -204.86986492111993, 4, RaschModels.ESF{Float64}([1.0, 5.521532689115959, 12.140912371589383, 13.289358314208496, 7.241896542436616, 1.5719179107015473], [1.0 1.0383510234202042 … 0.9273042355710446 1.3022057888569891; 4.521532689115959 4.655116270753883 … 4.260247504153208 5.494431914597246; … ; 1.5719179107015473 1.5719179107015473 … 1.5719179107015475 1.5719179107015473; 0.0 0.0 … 0.0 0.0], [1.0 0.0 … 0.0 0.0; 4.521532689115959 1.0383510234202042 … 0.9273042355710446 1.3022057888569891; … ; 1.5719179107015473 1.5719179107015473 … 1.5719179107015475 1.5719179107015473; 0.0 0.0 … 0.0 0.0;;; 0.0 1.0383510234202042 … 0.0 0.0; 1.0383510234202042 4.655116270753883 … 0.9628673020270843 1.3521467135633691; … ; 1.5719179107015473 1.5719179107015473 … 1.5719179107015473 1.5719179107015475; 0.0 0.0 … 0.0 0.0;;; 0.0 0.0 … 0.0 0.0; 1.2536716412677205 1.3017512317432247 … 1.1625350229628604 1.6325384685846682; … ; 1.5719179107015473 1.5719179107015473 … 1.5719179107015475 1.5719179107015473; 0.0 0.0 … 0.0 0.0;;; 0.0 0.0 … 0.9273042355710446 0.0; 0.9273042355710446 0.9628673020270843 … 4.260247504153208 1.2075409435922193; … ; 1.5719179107015475 1.5719179107015473 … 1.5719179107015475 1.5719179107015473; 0.0 0.0 … 0.0 0.0;;; 0.0 0.0 … 0.0 1.3022057888569891; 1.3022057888569891 1.3521467135633691 … 1.2075409435922193 5.494431914597246; … ; 1.5719179107015473 1.5719179107015475 … 1.5719179107015473 1.5719179107015473; 0.0 0.0 … 0.0 0.0], 5, 6), [0.030160425003790188 -0.007490213492400669 … -0.007529840959330841 -0.007586967552925845; -0.007490213492400675 0.030133054755447024 … -0.007524551263955903 -0.007575698824238017; … ; -0.007529840959330838 -0.007524551263955902 … 0.030278171748540725 -0.0076291955705074955; -0.007586967552925841 -0.007575698824238021 … -0.007629195570507493 0.03041438193798088], RaschModels.CML{RaschModels.SummationAlgorithm}(RaschModels.SummationAlgorithm(), nothing, true)), RaschModels.PersonParameterResult{RaschModels.PersonParameterWLE}(RaschModels.RaschModel, [-2.4076295303680317, -1.104409667247147, -0.33835739106124, 0.33845947026860906, 1.1044183773646967, 2.4074547817918543], [1.6208231362630319, 1.0348732492348065, 0.9090755934021267, 0.909061239112209, 1.0348266951415848, 1.620714386743898], RaschModels.PersonParameterWLE())), [Symbol(&quot;beta[1]&quot;), Symbol(&quot;beta[2]&quot;), Symbol(&quot;beta[3]&quot;), Symbol(&quot;beta[4]&quot;), Symbol(&quot;beta[5]&quot;)])</span></span></code></pre></div><h2 id="Plotting-results" tabindex="-1">Plotting results <a class="header-anchor" href="#Plotting-results" aria-label="Permalink to &quot;Plotting results {#Plotting-results}&quot;">​</a></h2><p>Having fit the model we can now plot the results. In this example we create a plot for the whole test (5 items) by calling the <a href="/ItemResponsePlots.jl/previews/PR25/examples/plots/testplot#testplot"><code>testplot</code></a> function.</p><p><a href="/ItemResponsePlots.jl/previews/PR25/examples/plots/testplot#testplot"><code>testplot</code></a> only requires the fitted model (<code>model</code>) as the single function argument.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemResponsePlots</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testplot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model)</span></span></code></pre></div><p><img src="`+i+`" alt=""></p><p>The plot above contains the test characteristic curve on the left and the test information curve on the right.</p><p>If we are interested in only a subset of items, we can plot this subset by passing a set of indices to <a href="/ItemResponsePlots.jl/previews/PR25/examples/plots/testplot#testplot"><code>testplot</code></a> in the second argument.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testplot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, items)</span></span></code></pre></div><p><img src="`+n+'" alt=""></p><h2 id="How-to-continue-from-here?" tabindex="-1">How to continue from here? <a class="header-anchor" href="#How-to-continue-from-here?" aria-label="Permalink to &quot;How to continue from here? {#How-to-continue-from-here?}&quot;">​</a></h2><p>If you are interested in ways to expand on the example above, you can take a look at the function reference for <a href="/ItemResponsePlots.jl/previews/PR25/examples/plots/testplot#testplot"><code>testplot</code></a> and its building blocks <a href="/ItemResponsePlots.jl/previews/PR25/examples/recipes/expected_score_plot#expected_score_plot"><code>expected_score_plot</code></a> and <a href="/ItemResponsePlots.jl/previews/PR25/examples/recipes/information_plot#information_plot"><code>information_plot</code></a>.</p><p>If you want to see more examples of item response plots, consider the <a href="./getting-started">Examples</a> page of this documentation.</p>',18),p=[o];function h(r,d,c,k,m,g){return a(),e("div",null,p)}const y=s(l,[["render",h]]);export{E as __pageData,y as default};
