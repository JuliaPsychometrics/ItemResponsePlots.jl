import{_ as s,c as e,o as a,a6 as t}from"./chunks/framework.DBpRcs4U.js";const i="/ItemResponsePlots.jl/previews/PR25/assets/getting-started-1.Kj1wLwOz.png",n="/ItemResponsePlots.jl/previews/PR25/assets/getting-started-2.Cdy4wmlw.png",E=JSON.parse('{"title":"Getting started","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started.md","filePath":"getting-started.md","lastUpdated":null}'),l={name:"getting-started.md"},o=t(`<h1 id="Getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#Getting-started" aria-label="Permalink to &quot;Getting started {#Getting-started}&quot;">​</a></h1><p>After successful <a href="/ItemResponsePlots.jl/previews/PR25/index#Installation">installation</a> you can start plotting your item response models. Typically visualizations of item response models are made from models fitted to data. In this simple example we will fit a Rasch Model to simulated data and plot the results.</p><h2 id="Fitting-the-model" tabindex="-1">Fitting the model <a class="header-anchor" href="#Fitting-the-model" aria-label="Permalink to &quot;Fitting the model {#Fitting-the-model}&quot;">​</a></h2><p>Using the <a href="https://github.com/juliapsychometrics/RaschModels.jl" target="_blank" rel="noreferrer">RaschModels.jl</a> package we can fit a simple Rasch Model to dichotomous responses from 100 persons to 5 items.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RaschModels</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n_persons </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n_items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_persons, n_items)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RaschModel, data, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RaschModels.RaschModel{AbstractItemResponseModels.PointEstimate, Matrix{Int64}, RaschModels.CombinedCMLResult{NamedArrays.NamedVector{Float64, Vector{Float64}, Tuple{OrderedCollections.OrderedDict{Symbol, Int64}}}}}([0 1 … 1 1; 0 0 … 0 0; … ; 0 1 … 1 0; 0 0 … 1 1], RaschModels.CombinedCMLResult{NamedArrays.NamedVector{Float64, Vector{Float64}, Tuple{OrderedCollections.OrderedDict{Symbol, Int64}}}}(RaschModels.RaschModel, [-0.007706736525647104, 0.1481807344777193, -0.1639855875110076, 0.03121832609359582, -0.00770673653466039, 1.1019388899339049, -2.4034837578814208, 0.33760511438932667, -1.1019342740946239, -0.3375546284358948  …  0.33760511438932667, 1.1019388899339049, 0.33760511438932667, 0.33760511438932667, 1.1019388899339049, -1.1019342740946239, 0.33760511438932667, 1.1019388899339049, -0.3375546284358948, 0.33760511438932667], RaschModels.CMLResult{NamedArrays.NamedVector{Float64, Vector{Float64}, Tuple{OrderedCollections.OrderedDict{Symbol, Int64}}}, Optim.MultivariateOptimizationResults{Optim.BFGS{LineSearches.InitialStatic{Float64}, LineSearches.HagerZhang{Float64, Base.RefValue{Bool}}, Nothing, Nothing, Optim.Flat}, Vector{Float64}, Float64, Float64, Vector{Optim.OptimizationState{Float64, Optim.BFGS{LineSearches.InitialStatic{Float64}, LineSearches.HagerZhang{Float64, Base.RefValue{Bool}}, Nothing, Nothing, Optim.Flat}}}, Bool, @NamedTuple{f_limit_reached::Bool, g_limit_reached::Bool, h_limit_reached::Bool, time_limit::Bool, callback::Bool, f_increased::Bool}}}(RaschModels.RaschModel, [-0.007706736525647104, 0.1481807344777193, -0.1639855875110076, 0.03121832609359582, -0.00770673653466039],  * Status: success</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Candidate solution</span></span>
<span class="line"><span>    Final objective value:     1.986984e+02</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Found with</span></span>
<span class="line"><span>    Algorithm:     BFGS</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Convergence measures</span></span>
<span class="line"><span>    |x - x&#39;|               = 1.15e-06 ≰ 0.0e+00</span></span>
<span class="line"><span>    |x - x&#39;|/|x&#39;|          = 7.37e-06 ≰ 0.0e+00</span></span>
<span class="line"><span>    |f(x) - f(x&#39;)|         = 2.31e-11 ≰ 0.0e+00</span></span>
<span class="line"><span>    |f(x) - f(x&#39;)|/|f(x&#39;)| = 1.16e-13 ≰ 0.0e+00</span></span>
<span class="line"><span>    |g(x)|                 = 1.22e-10 ≤ 1.0e-08</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Work counters</span></span>
<span class="line"><span>    Seconds run:   0  (vs limit Inf)</span></span>
<span class="line"><span>    Iterations:    5</span></span>
<span class="line"><span>    f(x) calls:    11</span></span>
<span class="line"><span>    ∇f(x) calls:   11</span></span>
<span class="line"><span>, -198.69841326313602, 4, RaschModels.ESF{Float64}([1.0, 4.986630430815552, 9.921158445004373, 9.844624892354942, 4.872296172958979, 0.9621992947928594], [1.0 0.8556554710053516 … 0.9618227829259278 1.0000000000090132; 3.986630430815552 3.53469132494771 … 3.871151692634755 3.9866304308424714; … ; 0.9621992947928594 0.9621992947928594 … 0.9621992947928595 0.9621992947928595; 0.0 0.0 … 0.0 0.0], [1.0 0.0 … 0.0 0.0; 3.986630430815552 0.8556554710053516 … 0.9618227829259278 1.0000000000090132; … ; 0.9621992947928594 0.9621992947928594 … 0.9621992947928595 0.9621992947928594; 0.0 0.0 … 0.0 0.0;;; 0.0 0.8556554710053516 … 0.0 0.0; 0.8556554710053516 3.53469132494771 … 0.8229889263481628 0.8556554710130638; … ; 0.9621992947928594 0.9621992947928594 … 0.9621992947928595 0.9621992947928595; 0.0 0.0 … 0.0 0.0;;; 0.0 0.0 … 0.0 0.0; 1.1691521768752593 1.000391456581132 … 1.1245172004260684 1.169152176885797; … ; 0.9621992947928596 0.9621992947928595 … 0.9621992947928595 0.9621992947928595; 0.0 0.0 … 0.0 0.0;;; 0.0 0.0 … 0.9618227829259278 0.0; 0.9618227829259278 0.8229889263481628 … 3.871151692634755 0.961822782934597; … ; 0.9621992947928595 0.9621992947928595 … 0.9621992947928595 0.9621992947928595; 0.0 0.0 … 0.0 0.0;;; 0.0 0.0 … 0.0 1.0000000000090132; 1.0000000000090132 0.8556554710130638 … 0.961822782934597 3.9866304308424714; … ; 0.9621992947928594 0.9621992947928595 … 0.9621992947928595 0.9621992947928595; 0.0 0.0 … 0.0 0.0], 5, 6), [0.031166584350413806 -0.0077999329769769836 … -0.00776379829015426 -0.007765237991001258; -0.007799932976976979 0.03128333265340685 … -0.007794457517414256 -0.007799932976979001; … ; -0.007763798290154259 -0.007794457517414261 … 0.031162530958211664 -0.007763798290155595; -0.0077652379910012614 -0.007799932976979006 … -0.007763798290155594 0.031166584350417244], RaschModels.CML{RaschModels.SummationAlgorithm}(RaschModels.SummationAlgorithm(), nothing, true)), RaschModels.PersonParameterResult{RaschModels.PersonParameterWLE}(RaschModels.RaschModel, [-2.4034837578814208, -1.1019342740946239, -0.3375546284358948, 0.33760511438932667, 1.1019388899339049, 2.403396902720877], [1.6196585111978794, 1.0339868919404895, 0.9082379679720265, 0.9082309126139337, 1.0339639076844305, 1.619604245763626], RaschModels.PersonParameterWLE())), [Symbol(&quot;beta[1]&quot;), Symbol(&quot;beta[2]&quot;), Symbol(&quot;beta[3]&quot;), Symbol(&quot;beta[4]&quot;), Symbol(&quot;beta[5]&quot;)])</span></span></code></pre></div><h2 id="Plotting-results" tabindex="-1">Plotting results <a class="header-anchor" href="#Plotting-results" aria-label="Permalink to &quot;Plotting results {#Plotting-results}&quot;">​</a></h2><p>Having fit the model we can now plot the results. In this example we create a plot for the whole test (5 items) by calling the <a href="/ItemResponsePlots.jl/previews/PR25/examples/plots/testplot#testplot"><code>testplot</code></a> function.</p><p><a href="/ItemResponsePlots.jl/previews/PR25/examples/plots/testplot#testplot"><code>testplot</code></a> only requires the fitted model (<code>model</code>) as the single function argument.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemResponsePlots</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testplot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model)</span></span></code></pre></div><p><img src="`+i+`" alt=""></p><p>The plot above contains the test characteristic curve on the left and the test information curve on the right.</p><p>If we are interested in only a subset of items, we can plot this subset by passing a set of indices to <a href="/ItemResponsePlots.jl/previews/PR25/examples/plots/testplot#testplot"><code>testplot</code></a> in the second argument.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testplot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, items)</span></span></code></pre></div><p><img src="`+n+'" alt=""></p><h2 id="How-to-continue-from-here?" tabindex="-1">How to continue from here? <a class="header-anchor" href="#How-to-continue-from-here?" aria-label="Permalink to &quot;How to continue from here? {#How-to-continue-from-here?}&quot;">​</a></h2><p>If you are interested in ways to expand on the example above, you can take a look at the function reference for <a href="/ItemResponsePlots.jl/previews/PR25/examples/plots/testplot#testplot"><code>testplot</code></a> and its building blocks <a href="/ItemResponsePlots.jl/previews/PR25/api#ItemResponsePlots.expected_score_plot"><code>expected_score_plot</code></a> and <a href="/ItemResponsePlots.jl/previews/PR25/api#ItemResponsePlots.information_plot"><code>information_plot</code></a>.</p><p>If you want to see more examples of item response plots, consider the <a href="./getting-started">Examples</a> page of this documentation.</p>',18),p=[o];function h(r,d,c,k,m,g){return a(),e("div",null,p)}const y=s(l,[["render",h]]);export{E as __pageData,y as default};
