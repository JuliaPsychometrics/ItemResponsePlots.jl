import{_ as s,c as e,o as a,a6 as t}from"./chunks/framework.BaW88Zjl.js";const i="/ItemResponsePlots.jl/dev/assets/getting-started-1.fdggBkIm.png",n="/ItemResponsePlots.jl/dev/assets/getting-started-2.Ca-BW8uI.png",E=JSON.parse('{"title":"Getting started","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started.md","filePath":"getting-started.md","lastUpdated":null}'),l={name:"getting-started.md"},o=t(`<h1 id="Getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#Getting-started" aria-label="Permalink to &quot;Getting started {#Getting-started}&quot;">​</a></h1><p>After successful <a href="/ItemResponsePlots.jl/dev/index#Installation">installation</a> you can start plotting your item response models. Typically visualizations of item response models are made from models fitted to data. In this simple example we will fit a Rasch Model to simulated data and plot the results.</p><h2 id="Fitting-the-model" tabindex="-1">Fitting the model <a class="header-anchor" href="#Fitting-the-model" aria-label="Permalink to &quot;Fitting the model {#Fitting-the-model}&quot;">​</a></h2><p>Using the <a href="https://github.com/juliapsychometrics/RaschModels.jl" target="_blank" rel="noreferrer">RaschModels.jl</a> package we can fit a simple Rasch Model to dichotomous responses from 100 persons to 5 items.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RaschModels</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n_persons </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n_items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_persons, n_items)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RaschModel, data, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RaschModels.RaschModel{AbstractItemResponseModels.PointEstimate, Matrix{Int64}, RaschModels.CombinedCMLResult{NamedArrays.NamedVector{Float64, Vector{Float64}, Tuple{OrderedCollections.OrderedDict{Symbol, Int64}}}}}([1 1 … 1 1; 0 0 … 1 0; … ; 1 0 … 0 1; 1 0 … 1 1], RaschModels.CombinedCMLResult{NamedArrays.NamedVector{Float64, Vector{Float64}, Tuple{OrderedCollections.OrderedDict{Symbol, Int64}}}}(RaschModels.RaschModel, [0.017024428352728695, 0.13694164564974673, -0.3878068258333272, 0.13694164564973482, 0.09689910618111697, 1.1117632613014234, -0.339639326645471, 0.3419671477622848, -0.339639326645471, -0.339639326645471  …  -1.1115592941177808, -1.1115592941177808, 0.3419671477622848, 1.1117632613014234, -1.1115592941177808, -0.339639326645471, -0.339639326645471, 0.3419671477622848, -0.339639326645471, 1.1117632613014234], RaschModels.CMLResult{NamedArrays.NamedVector{Float64, Vector{Float64}, Tuple{OrderedCollections.OrderedDict{Symbol, Int64}}}, Optim.MultivariateOptimizationResults{Optim.BFGS{LineSearches.InitialStatic{Float64}, LineSearches.HagerZhang{Float64, Base.RefValue{Bool}}, Nothing, Nothing, Optim.Flat}, Vector{Float64}, Float64, Float64, Vector{Optim.OptimizationState{Float64, Optim.BFGS{LineSearches.InitialStatic{Float64}, LineSearches.HagerZhang{Float64, Base.RefValue{Bool}}, Nothing, Nothing, Optim.Flat}}}, Bool, @NamedTuple{f_limit_reached::Bool, g_limit_reached::Bool, h_limit_reached::Bool, time_limit::Bool, callback::Bool, f_increased::Bool}}}(RaschModels.RaschModel, [0.017024428352728695, 0.13694164564974673, -0.3878068258333272, 0.13694164564973482, 0.09689910618111697],  * Status: success</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Candidate solution</span></span>
<span class="line"><span>    Final objective value:     1.923017e+02</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Found with</span></span>
<span class="line"><span>    Algorithm:     BFGS</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Convergence measures</span></span>
<span class="line"><span>    |x - x&#39;|               = 6.25e-07 ≰ 0.0e+00</span></span>
<span class="line"><span>    |x - x&#39;|/|x&#39;|          = 1.54e-06 ≰ 0.0e+00</span></span>
<span class="line"><span>    |f(x) - f(x&#39;)|         = 7.79e-12 ≰ 0.0e+00</span></span>
<span class="line"><span>    |f(x) - f(x&#39;)|/|f(x&#39;)| = 4.05e-14 ≰ 0.0e+00</span></span>
<span class="line"><span>    |g(x)|                 = 6.19e-13 ≤ 1.0e-08</span></span>
<span class="line"><span></span></span>
<span class="line"><span> * Work counters</span></span>
<span class="line"><span>    Seconds run:   0  (vs limit Inf)</span></span>
<span class="line"><span>    Iterations:    4</span></span>
<span class="line"><span>    f(x) calls:    9</span></span>
<span class="line"><span>    ∇f(x) calls:   9</span></span>
<span class="line"><span>, -192.3017023549582, 4, RaschModels.ESF{Float64}([1.0, 5.196269283817165, 10.664095692105557, 10.828722831882228, 5.449746476236274, 1.0888500526424376], [1.0 0.8869938614273449 … 0.8869938614273555 0.9232320405811877; 4.196269283817165 3.8223008468595 … 3.822300846859535 3.9450048935521638; … ; 1.0888500526424376 1.0888500526424374 … 1.0888500526424376 1.0888500526424376; 0.0 0.0 … 0.0 0.0], [1.0 0.0 … 0.0 0.0; 4.196269283817165 0.8869938614273449 … 0.8869938614273555 0.9232320405811877; … ; 1.0888500526424376 1.0888500526424374 … 1.0888500526424376 1.0888500526424376; 0.0 0.0 … 0.0 0.0;;; 0.0 0.8869938614273449 … 0.0 0.0; 0.8869938614273449 3.8223008468595 … 0.7867581102098014 0.8189011526685549; … ; 1.0888500526424374 1.0888500526424374 … 1.0888500526424374 1.0888500526424374; 0.0 0.0 … 0.0 0.0;;; 0.0 0.0 … 0.0 0.0; 1.4990495203812773 1.3296477225537986 … 1.3296477225538144 1.3839705476338573; … ; 1.0888500526424376 1.0888500526424376 … 1.0888500526424374 1.0888500526424374; 0.0 0.0 … 0.0 0.0;;; 0.0 0.0 … 0.8869938614273555 0.0; 0.8869938614273555 0.7867581102098014 … 3.822300846859535 0.8189011526685647; … ; 1.0888500526424376 1.0888500526424374 … 1.0888500526424376 1.0888500526424376; 0.0 0.0 … 0.0 0.0;;; 0.0 0.0 … 0.0 0.9232320405811877; 0.9232320405811877 0.8189011526685549 … 0.8189011526685647 3.9450048935521638; … ; 1.0888500526424376 1.0888500526424374 … 1.0888500526424376 1.0888500526424376; 0.0 0.0 … 0.0 0.0], 5, 6), [0.0320155531211813 -0.007925919840035755 … -0.007925919840035751 -0.007905613645230044; -0.007925919840035756 0.032141112604058476 … -0.007952000207625607 -0.007937463707714839; … ; -0.00792591984003575 -0.007952000207625603 … 0.032141112604058455 -0.007937463707714839; -0.00790561364523004 -0.007937463707714844 … -0.007937463707714837 0.032076154090445536], RaschModels.CML{RaschModels.SummationAlgorithm}(RaschModels.SummationAlgorithm(), nothing, true)), RaschModels.PersonParameterResult{RaschModels.PersonParameterWLE}(RaschModels.RaschModel, [-2.4218164031736573, -1.1115592941177808, -0.339639326645471, 0.3419671477622848, 1.1117632613014234, 2.4178195649144976], [1.6254896121386986, 1.0379652932148578, 0.9116645322564976, 0.9113375984955893, 1.036904963165731, 1.6230039220480008], RaschModels.PersonParameterWLE())), [Symbol(&quot;beta[1]&quot;), Symbol(&quot;beta[2]&quot;), Symbol(&quot;beta[3]&quot;), Symbol(&quot;beta[4]&quot;), Symbol(&quot;beta[5]&quot;)])</span></span></code></pre></div><h2 id="Plotting-results" tabindex="-1">Plotting results <a class="header-anchor" href="#Plotting-results" aria-label="Permalink to &quot;Plotting results {#Plotting-results}&quot;">​</a></h2><p>Having fit the model we can now plot the results. In this example we create a plot for the whole test (5 items) by calling the <a href="/ItemResponsePlots.jl/dev/examples/plots/testplot#testplot"><code>testplot</code></a> function.</p><p><a href="/ItemResponsePlots.jl/dev/examples/plots/testplot#testplot"><code>testplot</code></a> only requires the fitted model (<code>model</code>) as the single function argument.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CairoMakie</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ItemResponsePlots</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testplot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model)</span></span></code></pre></div><p><img src="`+i+`" alt=""></p><p>The plot above contains the test characteristic curve on the left and the test information curve on the right.</p><p>If we are interested in only a subset of items, we can plot this subset by passing a set of indices to <a href="/ItemResponsePlots.jl/dev/examples/plots/testplot#testplot"><code>testplot</code></a> in the second argument.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testplot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, items)</span></span></code></pre></div><p><img src="`+n+'" alt=""></p><h2 id="How-to-continue-from-here?" tabindex="-1">How to continue from here? <a class="header-anchor" href="#How-to-continue-from-here?" aria-label="Permalink to &quot;How to continue from here? {#How-to-continue-from-here?}&quot;">​</a></h2><p>If you are interested in ways to expand on the example above, you can take a look at the function reference for <a href="/ItemResponsePlots.jl/dev/examples/plots/testplot#testplot"><code>testplot</code></a> and its building blocks <a href="/ItemResponsePlots.jl/dev/examples/recipes/expected_score_plot#expected_score_plot"><code>expected_score_plot</code></a> and <a href="/ItemResponsePlots.jl/dev/examples/recipes/information_plot#information_plot"><code>information_plot</code></a>.</p><p>If you want to see more examples of item response plots, consider the <a href="./getting-started">Examples</a> page of this documentation.</p>',18),p=[o];function h(r,d,c,k,m,g){return a(),e("div",null,p)}const y=s(l,[["render",h]]);export{E as __pageData,y as default};
